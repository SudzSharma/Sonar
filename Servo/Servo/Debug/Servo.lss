
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  0000082f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	int i;
    DDRD=(1<<5);/* Replace with your application code */
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	81 bb       	out	0x11, r24	; 17
	TCCR1A=(1<<WGM11)|(0<<WGM10)|(0<<COM1A0)|(1<<COM1A1);//Clear on Comapare Match
  70:	82 e8       	ldi	r24, 0x82	; 130
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<WGM13)|(1<<CS12)|(1<<CS10);
  74:	8d e1       	ldi	r24, 0x1D	; 29
  76:	8e bd       	out	0x2e, r24	; 46
  

	ICR1=312;
  78:	88 e3       	ldi	r24, 0x38	; 56
  7a:	91 e0       	ldi	r25, 0x01	; 1
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

    while (1) 
    {
		
		
		for(i=9;i<=38;i++)
  80:	39 e0       	ldi	r19, 0x09	; 9
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	83 2f       	mov	r24, r19
  86:	92 2f       	mov	r25, r18
		{
			OCR1A=i;
  88:	9b bd       	out	0x2b, r25	; 43
  8a:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	ef e3       	ldi	r30, 0x3F	; 63
  8e:	fc e9       	ldi	r31, 0x9C	; 156
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop

    while (1) 
    {
		
		
		for(i=9;i<=38;i++)
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	87 32       	cpi	r24, 0x27	; 39
  9c:	91 05       	cpc	r25, r1
  9e:	a1 f7       	brne	.-24     	; 0x88 <main+0x1c>
  a0:	86 e2       	ldi	r24, 0x26	; 38
  a2:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(10);
		}
		
		for(i=38;i>=9;i--)
		{
			OCR1A=i;
  a4:	9b bd       	out	0x2b, r25	; 43
  a6:	8a bd       	out	0x2a, r24	; 42
  a8:	ef e3       	ldi	r30, 0x3F	; 63
  aa:	fc e9       	ldi	r31, 0x9C	; 156
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
		{
			OCR1A=i;
			_delay_ms(10);
		}
		
		for(i=38;i>=9;i--)
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	91 05       	cpc	r25, r1
  ba:	a1 f7       	brne	.-24     	; 0xa4 <main+0x38>
  bc:	e3 cf       	rjmp	.-58     	; 0x84 <main+0x18>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
